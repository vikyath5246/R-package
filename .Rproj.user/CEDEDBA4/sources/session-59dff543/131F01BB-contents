# Function to check if a variable is binary or continuous
check_variable_type <- function(variable) {
  if (is.factor(variable) || is.logical(variable)) {
    return("binary")
  } else if (is.numeric(variable)) {
    return("continuous")
  } else {
    return("other")
  }
}

# Function to determine the appropriate models based on data types
project <- function(data) {
  models <- list()

  for (col in names(data)) {
    if (col != "target_variable") {  # Replace "target_variable" with your actual dependent variable name
      col_type <- check_variable_type(data[[col]])

      if (col_type == "binary") {
        # Train logistic regression, random forest, and SVM models for classification
        models[[paste0(col, "_logistic_regression")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "glm",
          family = binomial,
          trControl = trainControl("cv", number = 10),
          metric = "Accuracy"
        )

        models[[paste0(col, "_random_forest_classification")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "rf",
          trControl = trainControl("cv", number = 10),
          metric = "Accuracy"
        )

        models[[paste0(col, "_svm")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "svmRadial",
          trControl = trainControl("cv", number = 10),
          metric = "Accuracy"
        )
      } else if (col_type == "continuous") {
        # Train linear regression, ridge regression, lasso regression, elastic net, and random forest models for regression
        models[[paste0(col, "_lm")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "lm",
          trControl = trainControl("cv", number = 10),
          metric = "RMSE"
        )

        models[[paste0(col, "_ridge")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "glmnet",
          tuneGrid = expand.grid(alpha = 0, lambda = seq(0.001, 1, length = 10)),
          trControl = trainControl("cv", number = 10),
          metric = "RMSE"
        )

        models[[paste0(col, "_lasso")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "glmnet",
          tuneGrid = expand.grid(alpha = 1, lambda = seq(0.001, 1, length = 10)),
          trControl = trainControl("cv", number = 10),
          metric = "RMSE"
        )

        models[[paste0(col, "_elastic_net")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "glmnet",
          tuneGrid = expand.grid(alpha = seq(0, 1, length = 5), lambda = seq(0.001, 1, length = 10)),
          trControl = trainControl("cv", number = 10),
          metric = "RMSE"
        )

        models[[paste0(col, "_random_forest")]] <- train(
          formula = as.formula(paste("target_variable", "~ .")),
          data = data,
          method = "rf",
          trControl = trainControl("cv", number = 10),
          metric = "RMSE"
        )
      }
    }
  }

  return(models)
}

# Sample usage
models <- project(data)
